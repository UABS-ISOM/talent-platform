type Query {
  _: Boolean
  me: User!
  course(
    courseId: ID!
    courseStaffOptions: PaginationInput
    courseStudentOptions: PaginationInput
    courseRepOptions: PaginationInput
  ): Course
  courseStudents(courseId: ID!, options: SearchInput!): [User!]!
  courseChat(courseId: ID!, chatId: String!): CourseChat!
  coursePersonalChat(courseId: ID!, otherUid: String!): CourseChat!
  chatHistory(courseId: ID!, chatId: String!, afterDoc: String): [ChatMessage!]!
  courseProject(courseId: ID!, projectId: ID!): CourseProject! # For reps
}

type Mutation {
  _: Boolean
  generateClaims: AuthClaims!
  addCourse(name: String!, description: String!): Course!
  addCourseMembers(
    courseId: ID!
    members: [CourseMemberInput!]!
    type: CourseMemberEnum!
  ): [User!]!
  editMe(input: EditMeInput!): User!
  addCourseChatMember(courseId: ID!, chatId: String, uid: String!): CourseChat!
  addCourseChatMessage(
    courseId: ID!
    chatId: String!
    message: String!
  ): ChatMessage!
  addCourseProject(courseId: ID!, name: String!): CourseProject!
  editCourseProject(input: EditCourseProjectInput!): CourseProject!
  approveCourseProject(
    courseId: ID!
    projectId: ID!
    approved: Boolean!
  ): CourseProject!
  editCourseGroupProject(input: EditGroupProjectInput!): CourseGroupProject!
}

input CourseMemberInput {
  name: String
  email: String!
}

enum CourseMemberEnum {
  STUDENT
  STAFF
  REP
}

input EditMeInput {
  name: String
  pronouns: String
  overview: String
  skills: [String!]
}

input PaginationInput {
  page: Int
  afterDoc: String
  beforeDoc: String
  rowsPerPage: Int!
}

input SearchInput {
  query: String
}

type AuthClaims {
  staff: Boolean!
}

scalar Date
